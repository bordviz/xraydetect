import os
from ultralytics import YOLO
import torch
import yaml

class SIXRayTrainer:
    def __init__(self, data_yaml_path, model_type='yolov8m.pt'):
        self.data_yaml_path = data_yaml_path
        self.model_type = model_type
        self.model = None
        
    def setup_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        print(f"PyTorch version: {torch.__version__}")
        print(f"CUDA available: {torch.cuda.is_available()}")
        
        if torch.cuda.is_available():
            print(f"GPU: {torch.cuda.get_device_name(0)}")
            device = 0
        else:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            device = 'cpu'
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è data.yaml
        if not os.path.exists(self.data_yaml_path):
            raise FileNotFoundError(f"–§–∞–π–ª {self.data_yaml_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        with open(self.data_yaml_path, 'r') as f:
            data_config = yaml.safe_load(f)
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π
        base_path = data_config['path']
        required_dirs = [
            os.path.join(base_path, 'train/images'),
            os.path.join(base_path, 'valid/images'), 
            os.path.join(base_path, 'test/images'),
            os.path.join(base_path, 'train/labels'),
            os.path.join(base_path, 'valid/labels'),
            os.path.join(base_path, 'test/labels')
        ]
        
        for dir_path in required_dirs:
            if not os.path.exists(dir_path):
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {dir_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        return device
    
    def setup_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        self.model = YOLO(self.model_type)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤
        self.model.overrides['imgsz'] = 640
        self.model.overrides['batch'] = 16
        self.model.overrides['epochs'] = 100
        self.model.overrides['lr0'] = 0.01
        self.model.overrides['weight_decay'] = 0.0005
        self.model.overrides['warmup_epochs'] = 3.0
        
        return self.model
    
    def train(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è"""
        print("üéØ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ SIXray...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        device = self.setup_environment()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model = self.setup_model()
        
        # –û–±—É—á–µ–Ω–∏–µ
        results = model.train(
            data=self.data_yaml_path,
            epochs=100,
            imgsz=640,
            batch=16,
            device=device,
            workers=8,
            optimizer='AdamW',
            lr0=0.001,
            patience=15,
            save=True,
            exist_ok=True,
            pretrained=True,
            mosaic=1.0,
            mixup=0.1,
            copy_paste=0.1,
            close_mosaic=10,
            overlap_mask=True,
            # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤
            hsv_h=0.015,
            hsv_s=0.7, 
            hsv_v=0.4,
            translate=0.1,
            scale=0.5,
            fliplr=0.5,
            # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            box=7.5,
            cls=0.5,
            dfl=1.5
        )
        
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return results
    
    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        if self.model is None:
            self.model = YOLO('runs/detect/train/weights/best.pt')
            
        metrics = self.model.val(
            data=self.data_yaml_path,
            split='test',
            imgsz=640,
            batch=16,
            conf=0.25,
            iou=0.45
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"mAP50: {metrics.box.map50:.4f}")
        print(f"mAP50-95: {metrics.box.map:.4f}") 
        print(f"Precision: {metrics.box.p:.4f}")
        print(f"Recall: {metrics.box.r:.4f}")
        
        return metrics

if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É data.yaml
    trainer = SIXRayTrainer(
        data_yaml_path='data/SIXray/data.yaml',
        model_type='yolov8m.pt'  # –∏–ª–∏ 'yolov9c.pt' –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ YOLOv9
    )
    
    # –û–±—É—á–µ–Ω–∏–µ
    results = trainer.train()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    metrics = trainer.validate()