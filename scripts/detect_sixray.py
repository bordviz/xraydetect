import cv2
import numpy as np
from ultralytics import YOLO
import matplotlib.pyplot as plt
from pathlib import Path

class SIXRayDetector:
    def __init__(self, model_path='runs/detect/train/weights/best.pt'):
        self.model = YOLO(model_path)
        self.class_names = ['gun', 'knife', 'wrench', 'pliers', 'scissors']
        self.colors = {
            'gun': (255, 0, 0),        # –ö—Ä–∞—Å–Ω—ã–π
            'knife': (0, 255, 0),      # –ó–µ–ª–µ–Ω—ã–π
            'wrench': (0, 0, 255),     # –°–∏–Ω–∏–π
            'pliers': (255, 255, 0),   # –ì–æ–ª—É–±–æ–π
            'scissors': (255, 0, 255)  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
        }
    
    def enhance_xray_image(self, image):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if len(image.shape) == 3:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        else:
            gray = image
            
        # CLAHE –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        enhanced = clahe.apply(gray)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ BGR
        if len(image.shape) == 3:
            enhanced_bgr = cv2.cvtColor(enhanced, cv2.COLOR_GRAY2BGR)
        else:
            enhanced_bgr = cv2.cvtColor(enhanced, cv2.COLOR_GRAY2BGR)
            
        return enhanced_bgr
    
    def detect(self, image_path, conf_threshold=0.25):
        """–î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = cv2.imread(image_path)
        if image is None:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            
        enhanced_image = self.enhance_xray_image(image)
        
        # –î–µ—Ç–µ–∫—Ü–∏—è
        results = self.model.predict(
            enhanced_image,
            conf=conf_threshold,
            imgsz=640,
            augment=False
        )
        
        return results[0]
    
    def visualize_detection(self, image_path, output_path=None, conf_threshold=0.25):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        # –î–µ—Ç–µ–∫—Ü–∏—è
        result = self.detect(image_path, conf_threshold)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plotted_image = result.plot()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if output_path:
            cv2.imwrite(output_path, plotted_image)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        plt.figure(figsize=(12, 8))
        plt.imshow(cv2.cvtColor(plotted_image, cv2.COLOR_BGR2RGB))
        plt.title('–î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - SIXray')
        plt.axis('off')
        plt.tight_layout()
        plt.show()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.print_detection_stats(result)
        
        return result
    
    def print_detection_stats(self, result):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–¢–ï–ö–¶–ò–ò SIXray")
        print("="*60)
        
        if len(result.boxes) == 0:
            print("‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return
            
        class_counts = {}
        for box in result.boxes:
            cls_id = int(box.cls.item())
            conf = box.conf.item()
            class_name = self.class_names[cls_id]
            
            if class_name not in class_counts:
                class_counts[class_name] = []
            class_counts[class_name].append(conf)
        
        print(f"üì¶ –í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(result.boxes)}")
        print("\nüìà –î–µ—Ç–∞–ª–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
        for class_name, confidences in class_counts.items():
            avg_conf = np.mean(confidences)
            max_conf = np.max(confidences)
            print(f"  üî∏ {class_name}:")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(confidences)}")
            print(f"     –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.3f}")
            print(f"     –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max_conf:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        dangerous_classes = [cls for cls in class_counts.keys()]
        if dangerous_classes:
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!")
            for obj in dangerous_classes:
                print(f"   - {obj}")
        print("="*60)

def batch_process_sixray(input_dir, output_dir, model_path='best.pt'):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ"""
    detector = SIXRayDetector(model_path)
    
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp']
    image_files = []
    
    for ext in image_extensions:
        image_files.extend(input_path.glob(ext))
        image_files.extend(input_path.glob(ext.upper()))
    
    print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    for i, img_path in enumerate(image_files):
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(image_files)}: {img_path.name}")
        
        output_img_path = output_path / f"detected_{img_path.name}"
        
        try:
            detector.visualize_detection(
                str(img_path),
                output_path=str(output_img_path),
                conf_threshold=0.25
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {img_path}: {e}")

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    detector = SIXRayDetector('runs/detect/train/weights/best.pt')
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    result = detector.visualize_detection(
        image_path='data/SIXray/test/images/example.jpg',
        output_path='result.jpg',
        conf_threshold=0.25
    )
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    # batch_process_sixray('data/SIXray/test/images', 'results')