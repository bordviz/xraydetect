import os
import yaml
from pathlib import Path
import cv2
import numpy as np

class SIXRayDatasetChecker:
    def __init__(self, data_yaml_path):
        self.data_yaml_path = data_yaml_path
        self.data_config = None
        self.base_path = None
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        with open(self.data_yaml_path, 'r') as f:
            self.data_config = yaml.safe_load(f)
        
        self.base_path = Path(self.data_config['path'])
        print(f"üìÅ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: {self.base_path}")
        print(f"üéØ –ö–ª–∞—Å—Å—ã: {self.data_config['names']}")
        print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {self.data_config['nc']}")
    
    def check_images_and_labels(self, split='train'):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–ª–∏—Ç–∞"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {split}...")
        
        images_dir = self.base_path / split / 'images'
        labels_dir = self.base_path / split / 'labels'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
        if not images_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ images –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {images_dir}")
            return
        if not labels_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ labels –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {labels_dir}")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        image_files = list(images_dir.glob('*.*'))
        label_files = list(labels_dir.glob('*.txt'))
        
        print(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        print(f"üìù –ê–Ω–Ω–æ—Ç–∞—Ü–∏–π: {len(label_files)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤
        image_stems = {f.stem for f in image_files}
        label_stems = {f.stem for f in label_files}
        
        missing_labels = image_stems - label_stems
        missing_images = label_stems - image_stems
        
        if missing_labels:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è {len(missing_labels)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        if missing_images:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {len(missing_images)} –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        for i, (img_file, lbl_file) in enumerate(zip(image_files[:3], label_files[:3])):
            print(f"\nüìÑ –ü—Ä–∏–º–µ—Ä {i+1}:")
            print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_file.name}")
            print(f"  –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: {lbl_file.name}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = cv2.imread(str(img_file))
            if img is not None:
                print(f"  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.shape}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            with open(lbl_file, 'r') as f:
                lines = f.readlines()
                print(f"  –û–±—ä–µ–∫—Ç–æ–≤ –≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {len(lines)}")
                for j, line in enumerate(lines[:2]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 2 –æ–±—ä–µ–∫—Ç–∞
                    cls, x, y, w, h = map(float, line.strip().split())
                    print(f"    –û–±—ä–µ–∫—Ç {j+1}: –∫–ª–∞—Å—Å {int(cls)}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [{x:.3f}, {y:.3f}, {w:.3f}, {h:.3f}]")
    
    def check_all_splits(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–ø–ª–∏—Ç–æ–≤"""
        self.load_config()
        
        for split in ['train', 'valid', 'test']:
            self.check_images_and_labels(split)

if __name__ == "__main__":
    checker = SIXRayDatasetChecker('data/SIXray/data.yaml')
    checker.check_all_splits()