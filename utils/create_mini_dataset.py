import os
import shutil
from pathlib import Path

class MiniDatasetCreator:
    def __init__(self, source_dataset_path, target_dataset_path, num_images=100):
        """
        Args:
            source_dataset_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
            target_dataset_path: –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–Ω–∏-–¥–∞—Ç–∞—Å–µ—Ç–∞  
            num_images: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–ª–∏—Ç–∞
        """
        self.source_path = Path(source_dataset_path)
        self.target_path = Path(target_dataset_path)
        self.num_images = num_images
        
    def create_mini_dataset(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏-–¥–∞—Ç–∞—Å–µ—Ç"""
        print(f"üöÄ –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò-–î–ê–¢–ê–°–ï–¢–ê –ò–ó {self.num_images} –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ù–ê –°–ü–õ–ò–¢")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        self._create_directory_structure()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ø–ª–∏—Ç
        for split in ['train', 'valid', 'test']:
            print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ {split}...")
            self._process_split(split)
        
        # –°–æ–∑–¥–∞–µ–º data.yaml –¥–ª—è –º–∏–Ω–∏-–¥–∞—Ç–∞—Å–µ—Ç–∞
        self._create_data_yaml()
        
        print(f"\n‚úÖ –ú–ò–ù–ò-–î–ê–¢–ê–°–ï–¢ –°–û–ó–î–ê–ù: {self.target_path}")
        
    def _create_directory_structure(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –º–∏–Ω–∏-–¥–∞—Ç–∞—Å–µ—Ç–∞"""
        directories = [
            'train/images', 'train/labels',
            'valid/images', 'valid/labels', 
            'test/images', 'test/labels'
        ]
        
        for dir_path in directories:
            full_path = self.target_path / dir_path
            full_path.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {full_path}")
    
    def _process_split(self, split):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Å–ø–ª–∏—Ç (train/valid/test)"""
        source_images_dir = self.source_path / split / 'images'
        source_labels_dir = self.source_path / split / 'labels'
        target_images_dir = self.target_path / split / 'images'
        target_labels_dir = self.target_path / split / 'labels'
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_files = list(source_images_dir.glob('*.*'))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        valid_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
        image_files = [f for f in image_files if f.suffix.lower() in valid_extensions]
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–º {split}: {len(image_files)}")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        selected_images = image_files[:self.num_images]
        print(f"   –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(selected_images)}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        copied_count = 0
        for img_path in selected_images:
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            target_img_path = target_images_dir / img_path.name
            shutil.copy2(img_path, target_img_path)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            label_path = source_labels_dir / f"{img_path.stem}.txt"
            if label_path.exists():
                target_label_path = target_labels_dir / f"{img_path.stem}.txt"
                shutil.copy2(label_path, target_label_path)
                copied_count += 1
            else:
                print(f"   ‚ö†Ô∏è –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {label_path}")
        
        print(f"   üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: {copied_count}")
    
    def _create_data_yaml(self):
        """–°–æ–∑–¥–∞–µ—Ç data.yaml —Ñ–∞–π–ª –¥–ª—è –º–∏–Ω–∏-–¥–∞—Ç–∞—Å–µ—Ç–∞"""
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π data.yaml —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å—ã
        source_yaml = self.source_path / 'data.yaml'
        
        if source_yaml.exists():
            # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π data.yaml
            target_yaml = self.target_path / 'data.yaml'
            shutil.copy2(source_yaml, target_yaml)
            print(f"üìÑ data.yaml —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {target_yaml}")
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π data.yaml
            yaml_content = f"""# Mini SIXray dataset
path: {self.target_path}
train: train/images
val: valid/images
test: test/images

nc: 5
names:
  0: gun
  1: knife
  2: wrench
  3: pliers
  4: scissors

description: Mini SIXray dataset with {self.num_images} images per split
"""
            with open(self.target_path / 'data.yaml', 'w') as f:
                f.write(yaml_content)
            print(f"üìÑ data.yaml —Å–æ–∑–¥–∞–Ω: {self.target_path / 'data.yaml'}")

def main():
    # –ü–£–¢–ò - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò!
    source_dataset = "data/SIXray"  # –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    target_dataset = "data/SIXray_mini"  # –ù–æ–≤—ã–π –º–∏–Ω–∏-–¥–∞—Ç–∞—Å–µ—Ç
    num_images = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—ã–π —Å–ø–ª–∏—Ç
    
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò-–î–ê–¢–ê–°–ï–¢–ê SIXray")
    print("=" * 50)
    print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {source_dataset}")
    print(f"üìÅ –¶–µ–ª—å: {target_dataset}")
    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–ø–ª–∏—Ç: {num_images}")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    if not Path(source_dataset).exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_dataset}")
        print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
        return
    
    creator = MiniDatasetCreator(os.path.abspath(source_dataset), os.path.abspath(target_dataset), num_images)
    creator.create_mini_dataset()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ù–ò-–î–ê–¢–ê–°–ï–¢–ê:")
    print(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {num_images * 3}")
    print(f"   Train: {num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   Valid: {num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π") 
    print(f"   Test: {num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –†–∞–∑–º–µ—Ä: ~{num_images * 3 * 0.5:.1f} MB (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)")

if __name__ == "__main__":
    main()